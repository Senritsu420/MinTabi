# ワークフローの名前
name: golang_ci

# トリガーになる Github イベント
on:
  pull_request:
    branches:
      - develop
    paths:
      - "backend/**"
  workflow_dispatch:

env:
  DOCKER_IMAGE_TAG: "backend"

# デフォルトの作業ディレクトリ変更
defaults:
  run:
    working-directory: ./backend

# ジョブ定義
jobs:
  # ジョブ名
  go_test:
    runs-on: ubuntu-latest
    steps:
      # リポジトリからソースコードの取得
      - name: Checkout Repository
        uses: actions/checkout@v3

        # Go の実行環境 Setup
      - name: Go Setup
        uses: actions/setup-go@v4
        with:
          go-version: 1.21

      # テストの実行
      - name: Run Test
        run: go test -v ./... -coverprofile=coverage.out

      - name: Run Octocov
        uses: k1LoW/octocov-action@v0

  go_lint:
    runs-on: ubuntu-latest
    steps:
      # リポジトリからソースコードの取得
      - name: Checkout Repository
        uses: actions/checkout@v3

        # Go の実行環境 Setup
      - name: Go Setup
        uses: actions/setup-go@v4
        with:
          go-version: 1.21

      # golangci-lintを実行
      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v3
        with:
          version: latest
          args: --disable-all --enable=govet,errcheck,staticcheck,unused,gosimple,misspell,lll,gofumpt

  go_build_check:
    runs-on: ubuntu-latest
    steps:
      # リポジトリからソースコードの取得
      - name: Checkout Repository
        uses: actions/checkout@v3

      # Dockerのコンテナイメージをビルド
      - name: Docker Build
        run: |
          docker build -f Dockerfile -t ${{ env.DOCKER_IMAGE_TAG }} .

      # Dockleで脆弱性検査を行う
      - name: Run Dockle
        uses: erzz/dockle-action@v1
        with:
          image: ${{ env.DOCKER_IMAGE_TAG }}
          exit-code: 1
          failure-threshold: fatal
