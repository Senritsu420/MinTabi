# ワークフローの名前
name: nextjs_ci

# トリガーになる Github イベント
on:
  pull_request:
    branches:
      - develop
    paths:
      - "frontend/**"
  workflow_dispatch:

env:
  DOCKER_IMAGE_TAG: "frontend"

# デフォルトの作業ディレクトリ変更
defaults:
  run:
    working-directory: ./frontend

# ジョブ定義
jobs:
  # ジョブ名
  nextjs_lint:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        # 使用するNode.jsのバージョンを定義
        node-version: [18]
    permissions:
      contents: read
      pull-requests: write

    steps:
      # リポジトリからソースコードの取得
      - name: Checkout Repository
        uses: actions/checkout@v4

      # Node.jsのセットアップ
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          # 利用したいNode.jsバージョンを指定
          node-version: ${{ matrix.node-version }}
          # npmのキャッシュを使用する設定
          cache: "npm"
          cache-dependency-path: ./frontend/package-lock.json

      # プロジェクトの依存関係をインストール
      - name: Install Dependencies
        run: npm install

      # Prettierでフォーマット
      - name: Format Code
        run: npm run prettier

      # ReviewdogをESLintで実行
      - name: Run ESLint Reviewdog
        uses: reviewdog/action-eslint@v1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          reporter: github-pr-review
          eslint_flags: "src/**/*.{ts,tsx}"

  nextjs_build_check:
    runs-on: ubuntu-latest
    steps:
      # リポジトリからソースコードの取得
      - name: Checkout Repository
        uses: actions/checkout@v4

      # Dockerのコンテナイメージをビルド
      - name: Docker Image Build
        run: |
          docker build -f Dockerfile -t ${{ env.DOCKER_IMAGE_TAG }} .

      # Dockleで脆弱性検査を行う
      - name: Run Dockle
        uses: erzz/dockle-action@v1
        with:
          image: ${{ env.DOCKER_IMAGE_TAG }}
          exit-code: 1
          failure-threshold: fatal
